#!/bin/bash

set -o nounset
set -o errexit

declare -a repos_to_update=(
"$HOME/repos/yt-dlp_git"
)

IGNORE_PKGS="--ignore zfs-linux,zfs-linux-git,zfs-linux-headers,zfs-utils,zfs-utils-debug,zfs-utils-git,linux,linux-docs,linux-headers,linux-api-headers,nvidia,nvidia-utils,lib32-nvidia-utils,nvidia-settings,opencl-nvidia,nvidia-open"

Fy=0
cleanup=0
downloadPackages=0
ignorePkgs=0
firmwareUpdate=0
noConfirm=0
paccheck=0
poweroffOnSuccess=0
rebootOnSuccess=0
verbose=0

mountNasCache=1

flatUpdate=1
reposUpdate=1
sysUpdate=1
tldrUpdate=1

unsetDefaultFlags=0 # whether cmd args are given, if not set default flags below
while [[ $# -gt 0 ]]; do
  unsetDefaultFlags=1
  case $1 in
    c|clean|cleanup|clearPkgCaches)
      Fy=1 # not cleanup, but useful to do every now and then
      cleanup=1
      shift
      ;;
    check)
      paccheck=1
      shift
      ;;
    f|firmware|firmwareUpdate)
      firmwareUpdate=1
      shift
      ;;
    i|ignorePkgs)
      # Ignore some packages that e..g depend on zfs/linux/etc.
      ignorePkgs=1
      unsetDefaultFlags=0
      shift
      ;;
    m|noMount)
      # Don't mount external package cache.
      mountNasCache=0
      unsetDefaultFlags=0
      shift
      ;;
    n|noUpdate)
      flatUpdate=0
      reposUpdate=0
      sysUpdate=0
      tldrUpdate=0
      unsetDefaultFlags=0
      shift
      ;;
    p|poweroff|shutdown)
      # Poweroff after successfully updating.
      poweroffOnSuccess=1
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    r|reboot)
      # Reboot after successfully updating.
      rebootOnSuccess=1
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    u|updatePkgDb)
      # Update pkgfile database.
      Fy=1
      shift
      ;;
    v|verbose)
      verbose=1
      unsetDefaultFlags=0
      shift
      ;;
    w|downloadOnly)
      # Don't install anything; just download packages into cache; only applies to pacman
      downloadPackages=1
      flatUpdate=0
      reposUpdate=0
      sysUpdate=0
      tldrUpdate=0
      unsetDefaultFlags=0
      shift
      ;;
    y|noconfirm|yes)
      # Suppress interactivity and assume yes for update processes
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    -|--)
      # No more parameters, shift the - and stop processing them
      unsetDefaultFlags=0
      shift
      break
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

if [[ $unsetDefaultFlags -eq 1 ]]; then
  flatUpdate=0
  mountNasCache=0
  reposUpdate=0
  sysUpdate=0
  tldrUpdate=0
fi

if [[ $verbose -eq 1 ]]; then
  echo "Fy: $Fy"
  echo "cleanup: $cleanup"
  echo "downloadPackages: $downloadPackages"
  echo "ignorePkgs: $ignorePkgs"
  echo "firmwareUpdate: $firmwareUpdate"
  echo "noConfirm: $noConfirm"
  echo "paccheck: $paccheck"
  echo "poweroffOnSuccess: $poweroffOnSuccess"
  echo "rebootOnSuccess: $rebootOnSuccess"

  echo "mountNasCache: $mountNasCache"

  echo "flatUpdate: $flatUpdate"
  echo "reposUpdate: $reposUpdate"
  echo "sysUpdate: $sysUpdate"
  echo "tldrUpdate: $tldrUpdate"
fi

# caching sudo
sudo echo || exit 202

RET=0

if [[ $mountNasCache -eq 1 ]]; then
  if [[ $(n > /dev/null) -eq 0 ]]; then
    echo ':: nas-pkg-cache mounted'
  else
    echo ':: nas-pkg-cache mount failed'
    exit 1
  fi
fi

if [[ $Fy -eq 1 ]]; then
  paru -Fy
fi

if [[ $cleanup -eq 1 ]]; then
  #paru -Sc # Debatable whether I ever want to use this. The keep-last-three-versions hook works nicely.
  echo -e "\nflatpak cleanup..."
  cmd="flatpak uninstall --unused --delete-data --assumeyes"
  # if [[ $noConfirm -eq 1 ]]; then
  #   cmd="$cmd --assumeyes"
  # fi
  eval "$cmd"
fi

if [[ $paccheck -eq 1 ]]; then
  echo -e "\nchecking package permissions, etc...."
  sudo paccheck --recursive --quiet --file-properties --md5sum --sha256sum --require-mtree --db-files --depends --files
fi

if [[ $firmwareUpdate -eq 1 ]]; then
  echo -e "\nupdating firmwares..."
  sudo fwupdmgr refresh || true # exits with non-zero if metadata is up to date
  sudo fwupdmgr update
fi

if [[ $downloadPackages -eq 1 ]]; then
  echo -e "\nDownloading paru update packages..."
  cmd="paru --needed -S --refresh --downloadonly --noconfirm --mode=repo"
  if [[ $ignorePkgs -eq 1 ]]; then
    read -ra ignore_pkgs_arr <<<"${IGNORE_PKGS}"
    cmd="$cmd ${ignore_pkgs_arr[*]}"
  fi
  cmd="$cmd $*"

  if [[ $verbose -eq 1 ]]; then
    eval "echo $cmd"
  fi
  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? ) # bash equivalent of RET |= $?
fi

if [[ $sysUpdate -eq 1 ]]; then
  echo -e "\nDoing package update..."
  #paru maintianer isn't confident in --needed with paru, let's see if any issues arise... https://github.com/Morganamilo/paru/pull/1100
  cmd="paru -S --refresh --sysupgrade --devel --needed"
  if [[ $noConfirm -eq 1 ]]; then
    cmd="$cmd --noconfirm"
  fi
  if [[ $ignorePkgs -eq 1 ]]; then
    read -ra ignore_pkgs_arr <<<"${IGNORE_PKGS}"
    cmd="$cmd ${ignore_pkgs_arr[*]}"
  fi
  cmd="$cmd $*"

  if [[ $verbose -eq 1 ]]; then
    eval "echo $cmd"
  fi
  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? ) # bash equivalent of RET |= $?
fi

if [[ $flatUpdate -eq 1 ]]; then
  echo -e "\nflatpak update..."

  cmd="flatpak update --assumeyes"
#  if [[ $noConfirm -eq 1 ]]; then
#    cmd="$cmd --assumeyes"
#  fi

  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? )
  echo -e "\nflatpak update done"
fi

if [[ $tldrUpdate -eq 1 ]]; then
  echo -e "\nupdating tldr cache..."
  tldr --update
fi

if [[ $reposUpdate -eq 1 ]]; then
  echo -e "\nupdating repos..."

  for i in "${repos_to_update[@]}"
  do
    if [[ -d "$i" ]]; then
      (
      echo "updating $i"
      cd "$i"
      git pull --verbose || echo "WARNING: git pull '$i' failed"
      )
  else
    echo "WARNING: '$i' is specified to be updated but doesn't exist"
    fi
  done
fi

if [[ "$RET" -eq 0 ]]; then
  if [[ $rebootOnSuccess -eq 1 ]]; then
    echo -e "\nrebooting..."
    systemctl reboot
  fi
  if [[ $poweroffOnSuccess -eq 1 ]]; then
    echo -e "\nshutting down..."
    systemctl poweroff
  fi
fi

echo -e "\nall done"
