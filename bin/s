#!/bin/bash

set -o nounset
set -o errexit

Fy=0
cleanup=0
downloadPackages=0
firmwareUpdate=0
noConfirm=0
paccheck=0
poweroffOnSuccess=0
rebootOnSuccess=0

flatUpdate=1
mountNasCache=1
#snapshot=0
sysUpdate=1

unsetDefaultFlags=0 # whether cmd args are given, if not set default flags below
while [[ $# -gt 0 ]]; do
  unsetDefaultFlags=1
  case $1 in
    c|clean|cleanup|clearPkgCaches)
      Fy=1 # not cleanup, but useful to do every now and then
      cleanup=1
      #snapshot=0
      shift
      ;;
    check)
      paccheck=1
      shift
      ;;
    f|firmware|firmwareUpdate)
      firmwareUpdate=1
      #snapshot=0
      shift
      ;;
    m|noMount)
      # Don't mount external package cache.
      mountNasCache=0
      unsetDefaultFlags=0
      shift
      ;;
    n|noUpdate)
      flatUpdate=0
      sysUpdate=0
      unsetDefaultFlags=0
      shift
      ;;
    p|poweroff|shutdown)
      # Poweroff after successfully updating.
      poweroffOnSuccess=1
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    r|reboot)
      # Reboot after successfully updating.
      rebootOnSuccess=1
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    u|updatePkgDb)
      # Update pkgfile database.
      Fy=1
      shift
      ;;
#    s|skipSnapshots)
#      # Don't make new or delete old snapshots.
#      snapshot=0
#      unsetDefaultFlags=0
#      shift
#      ;;
    w|downloadOnly)
      # Don't install anything; just download packages into cache; only applies to pacman
      downloadPackages=1
      #snapshot=0
      flatUpdate=0
      sysUpdate=0
      unsetDefaultFlags=0
      shift
      ;;
    y|noconfirm|yes)
      # Suppress interactivity and assume yes for update processes
      noConfirm=1
      unsetDefaultFlags=0
      shift
      ;;
    -|--)
      # No more parameters, shift the - and stop processing them
      unsetDefaultFlags=0
      shift
      break
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

if [[ $unsetDefaultFlags -eq 1 ]]; then
  flatUpdate=0
  mountNasCache=0
  #snapshot=0
  sysUpdate=0
fi

#echo "Fy: $Fy"
#echo "cleanup: $cleanup"
#echo "downloadPackages: $downloadPackages"
#echo "firmwareUpdate: $firmwareUpdate"
#echo "noConfirm: $noConfirm"
#echo "paccheck: $paccheck"
#echo "poweroffOnSuccess: $poweroffOnSuccess"
#echo "rebootOnSuccess: $rebootOnSuccess"

#echo "flatUpdate: $flatUpdate"
#echo "mountNasCache: $mountNasCache"
####echo "snapshot: $snapshot"
#echo "sysUpdate: $sysUpdate"

# caching sudo, so pressing ctrl+c doesn't trigger 'snapshot creation failure' errors further down
sudo echo || exit 202

#if [[ $snapshot -eq 1 ]]; then
#  zfs-pre-update-snapshot
#fi

if [[ $mountNasCache -eq 1 ]]; then
  #(n > /dev/null) && (echo ':: nas-pkg-cache mounted';) || (echo ':: nas-pkg-cache mount failed'; exit 1;)
  if [[ $(n > /dev/null) -eq 0 ]]; then
    echo ':: nas-pkg-cache mounted'
  else
    echo ':: nas-pkg-cache mount failed'
    exit 1
  fi
fi

if [[ $Fy -eq 1 ]]; then
  paru -Fy
fi

if [[ $cleanup -eq 1 ]]; then
  #paru -Sc # Debatable whether I ever want to use this. The keep-last-three-versions hook works nicely.
  echo -e "\nflatpak cleanup..."
  cmd="flatpak uninstall --unused --delete-data"
  if [[ $noConfirm -eq 1 ]]; then
    cmd="$cmd --assumeyes"
  fi
  eval "$cmd"
fi

if [[ $paccheck -eq 1 ]]; then
  echo -e "\nchecking package permissions, etc...."
  sudo paccheck --recursive --quiet --file-properties --md5sum --sha256sum --require-mtree --db-files --depends --files
fi

if [[ $firmwareUpdate -eq 1 ]]; then
  echo -e "\nupdating firmwares..."
  sudo fwupdmgr refresh || true # exits with non-zero if metadata is up to date
  sudo fwupdmgr update
fi

if [[ $downloadPackages -eq 1 ]]; then
  paru --needed --downloadonly --noconfirm --mode=repo -Syu
fi

RET=0
if [[ $sysUpdate -eq 1 ]]; then
  #paru maintianer isn't confident in --needed with paru, let's see if any issues arise... https://github.com/Morganamilo/paru/pull/1100
  cmd="paru -Syu --devel --needed"
  #cmd="paru -Syu --devel"
  if [[ $noConfirm -eq 1 ]]; then
    cmd="$cmd --noconfirm"
  fi
  cmd="$cmd $*"

  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? ) # bash equivalent of RET |= $?
fi

if [[ $flatUpdate -eq 1 ]]; then
  echo -e "\nflatpak update..."

  cmd="flatpak update --assumeyes"
#  if [[ $noConfirm -eq 1 ]]; then
#    cmd="$cmd --assumeyes"
#  fi

  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? )
  echo -e "\nflatpak update done"
fi

if [[ "$RET" -eq 0 ]]; then
  if [[ $rebootOnSuccess -eq 1 ]]; then
    echo -e "\nrebooting..."
    systemctl reboot
  fi
  if [[ $poweroffOnSuccess -eq 1 ]]; then
    echo -e "\nshutting down..."
    systemctl poweroff
  fi
fi

echo -e "\nall done"
