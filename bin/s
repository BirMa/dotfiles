#!/bin/bash
# TODO: Port this to python.
# TODO: Add 'sudo paccheck --recursive --quiet --file-properties --md5sum --sha256sum --require-mtree --db-files --depends --files '
# TODO: Add 'pacman -Fy # Download global package database including file lists of ALL packages' (useful for pacman -Fl do-i-need-this-package?)

set -o nounset
set -o errexit

DATASET="$(zfs-poolname)/root/default"

mountNasCache=1
Fy=0
cleanup=0
sysUpdate=1
flatUpdate=1
rebootOnSuccess=0
poweroffOnSuccess=0
skipSnapshots=0
noConfirm=0
downloadPackages=0

while [[ $# -gt 0 ]]; do
  case $1 in
    n|noMount)
      # Don't mount external package cache.
      mountNasCache=0
      shift
      ;;
    u|updatePkgDb)
      # Update pkgfile database.
      Fy=1
      shift
      ;;
    c|clearPkgCaches)
      # Clear package caches.
      cleanup=1
      shift
      ;;
    noUpdate)
      sysUpdate=0
      flatUpdate=0
      shift
      ;;
    r|reboot)
      # Reboot after successfully updating.
      rebootOnSuccess=1
      shift
      ;;
    p|poweroff)
      # Poweroff after successfully updating.
      poweroffOnSuccess=1
      shift
      ;;
    s|skipSnapshots)
      # Don't make new or delete old snapshots.
      skipSnapshots=1
      shift
      ;;
    y|yes)
      # Suppress interactivity and assume yes for update processes
      noConfirm=1
      shift
      ;;
    w|downloadOnly)
      # Don't install anything; just download packages into cache; only applies to pacman
      downloadPackages=1
      skipSnapshots=1
      flatUpdate=0
      sysUpdate=0
      shift
      ;;
    -|--)
      # No more parameters, shift the - and stop processing them
      shift
      break
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

# caching sudo, so pressing ctrl+c doesn't trigger 'snapshot creation failure' errors further down
sudo echo || exit 202

SNAPPSHOT_NAME="$DATASET@pre_update_$(date +%Y-%m-%d-%a)"
if [[ $skipSnapshots -ne 1 ]];then
  if sudo zfs snapshot "$SNAPPSHOT_NAME"; then
    echo ":: snapshot created: $SNAPPSHOT_NAME"
    # TODO - this fails if there is no pre_update_* snapshot
    if zfs list -t snapshot -H -o name | grep -v "^$SNAPPSHOT_NAME$" | grep "^$DATASET@pre_update_.*" | xargs --max-args=1 sudo zfs destroy; then
      echo ":: old snapshots destroyed"
    else
      echo ":: destruction of old snapshots failed"
      exit 201
    fi
  else
    echo ":: snapshot creation failed: $SNAPPSHOT_NAME"
  fi
fi

if [[ $mountNasCache -eq 1 ]]; then
  #(n > /dev/null) && (echo ':: nas-pkg-cache mounted';) || (echo ':: nas-pkg-cache mount failed'; exit 1;)
  if [[ $(n > /dev/null) -eq 0 ]]; then
    echo ':: nas-pkg-cache mounted'
  else
    echo ':: nas-pkg-cache mount failed'
    exit 1
  fi
fi

if [[ $Fy -eq 1 ]]; then
  paru -Fy
fi

if [[ $cleanup -eq 1 ]]; then
  #paru -Sc # Debatable whether I ever want to use this. The keep-last-three-versions hook works nicely.
  cmd="flatpak uninstall --unused --delete-data"
  if [[ $noConfirm ]]; then
    cmd="$cmd --assumeyes"
  fi
  eval "$cmd"
fi

if [[ $downloadPackages -eq 1 ]]; then
  paru --needed --devel --downloadonly --noconfirm -Syu
fi

RET=0
if [[ $sysUpdate -eq 1 ]]; then
  cmd="paru --needed --devel -Syu"
  if [[ $noConfirm ]]; then
    cmd="$cmd --noconfirm"
  fi
  cmd="$cmd $*"

  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? ) # bash equivalent of RET |= $?
fi

if [[ $flatUpdate -eq 1 ]]; then
  echo -e "\nflatpak update..."

  cmd="flatpak update"
  if [[ $noConfirm ]]; then
    cmd="$cmd --assumeyes"
  fi

  eval "$cmd"
  RET=$( test $? -eq "$RET" -a $? -eq 0; echo $? )
fi

if [[ "$RET" -eq 0 ]]; then
  if [[ $rebootOnSuccess -eq 1 ]]; then
    systemctl reboot
  fi
  if [[ $poweroffOnSuccess -eq 1 ]]; then
    systemctl poweroff
  fi
fi
